Файлы в каталоге mapsources являются источником сведений о карте и содержат параметры и функции, нужные для получения тайлов и обслуживания кеша соответствующей карты.
Имя файла состоит из названия карты и расширения .php
Название карты - это имя каталога с кешем карты.
Файл источника прямо включается в выполняемую программу, поэтому соблюдение синтаксиса строго обязательно.
В файле-источнике ничего не является обязательным. Вместо отсутствующих значений будут применены умолчальные.

Список применяемых в описании источника переменных находится в mapsourcesVariablesList.php
НЕЛЬЗЯ как-то изменять этот файл.

$functionGetURL = <<<'EOFU' 	// строка с функцией формирования запроса на получение тайлов.
EOFU;
Оборачивание функции в строку сделано потому, что для загрузчика в очередь могут быть поставлены файлы заданий для разных источников карт, и в loaderSched.php файлы источников загружаются (include) в цикле. Поскольку переопределить функцию в php нельзя, функция получения url вообще не определяется в файле источника.

Функция  формирования запроса на получение тайлов должна называться getURL
function getURL($z,$x,$y,$getURLparams) {}
Она получает номер тайла в обычном порядке $zoom - z компонента, $xtile - x компонента и $ytile - y компонента: getURL($zoom,$xtile,$ytile)
Можно также передать $layer - кусок пути до варианта или слоя карты. Не должен начинаться и оканчиваться на /
Она возвращает либо строку - uri запроса на получение указанного тайла, либо массив из двух элементов:
строка - uri запроса на получение указанного тайла, и массив параметров для функции  stream_context_create()
В функции можно использовать полезные процедуры из fcommon.php
Также в функции можно указать собственный proxy для этого источника:
$opts['http']=array(
			'proxy'=>'tcp://127.0.0.1:8123',
			'request_fulluri'=>TRUE
			);
Этот proxy будет применяться с этим источником всегда - при наличии или отсутствии глобального proxy.

Другая похожая функция -- getTile() -- предназначена для организации альтернативного получения тайла, не из файловой системы. В настоящее время имеется поддержка только получения тайлов из файлов формате .mbtiles. В этом случае файл описания карты может состоять только из:
<?php
$functionGetTile = <<<'EOFU'
function getTile($r,$z,$x,$y){
	require_once('MBTilesClient.php');
	return serveMBTiles($r,$z,$x,$y);
} // end function getTile
EOFU;
?>
Однако, практически полезно добавить человеческое название карты и минимальный и максимальный масштабы. Кроме того, для векторных тайлов необходимо указать
$ext = 'pbf';
$ContentType = 'application/x-protobuf';
$content_encoding = 'gzip';
и иметь файл стилей.

Для взаимодействия с GaladrielMap в описании источника можно использовать массив
$data = array();
$data['javascriptOpen']; 	// строка javascript, выполняемая eval перед созданием карты
$data['javascriptClose']; 	// строка javascript, выполняемая eval перед закрытием карты

Векторные тайлы
 -- должны умереть. Очень кривой, очень ресурсоёмкий формат, полезный только правоторговцам.
 Однако, ограниченная поддержка имеется. Можно показывать векторные тайлы в формате MapBox .pbf
 Файл стиля .json должен иметь имя карты, и располагаться рядом с файлом описания источника карты.
 НО!!! Тупые пацаны, придумавшие формат MapBox, потребовали, чтобы в файле стиля были полные url ресурсов. Именно полные, относительный путь не поддерживается. Поэтому шрифты и значки лежат в каталоге GaladrielMap, и пути в каждом файле стиля должны указывать туда.
